#+TITLE: 競プロ盆栽.hs
#+BOOK_DIR: ../books/kyopro-bonsai-hs
#+PROPERTY: header-args :results output
#+LINK: serious https://zenn.dev/toyboot4e/books/seriously-haskell
#+LINK: cojna/iota https://github.com/cojna/iota
#+LINK: tessoku https://book.mynavi.jp/ec/products/detail/id=131288
#+LINK: sqrt-decomposition https://cp-algorithms.com/data_structures/sqrt_decomposition.html

* スクリプト

#+NAME: zenn-headings
#+BEGIN_SRC elisp
(org-map-entries
  (lambda ()
    (let* ((title (org-entry-get nil "EXPORT_FILE_NAME"))
           (is-draft (org-entry-get nil "DRAFT")))
      (when (and title (not is-draft))
        (princ (concat "- " title "\n")))))
  "LEVEL=1")
#+END_SRC

* =config.yaml=
:PROPERTIES:
:DRAFT:
:END:

#+BEGIN_SRC yaml :tangle ../books/kyopro-bonsai-hs/config.yaml :noweb yes
title: "競プロ盆栽.hs"
summary: "Haskell の AtCoder 用自作ライブラリ解説"
topics: ["haskell", "atcoder"]
published: false
price: 0
<<zenn-headings()>>
#+END_SRC

#+NAME: test
#+BEGIN_SRC bash
echo hello
#+END_SRC

#+BEGIN_SRC bash :noweb yes
echo "<<test()>>"
#+END_SRC

#+RESULTS:

* :DRAFT: のテスト
:PROPERTIES:
:EXPORT_FILE_NAME: this-is-draft
:DRAFT:
:END:

* 始めに
:PROPERTIES:
:EXPORT_FILE_NAME: intro
:END:

僕の AtCoder の現状をお届けします。

[[serious][AtCoder ガチ言語 Haskell]] が入門編としたら、こちらはライブラリ整理編、あるいはブログです。

* C++ 風のパーサ (StateT)
:PROPERTIES:
:EXPORT_FILE_NAME: parser
:END:

競技プログラミングにおいては [[https://cpprefjp.github.io/reference/iostream.html][C++ の =iostream=]] のように、

#+BEGIN_SRC cpp
int n m;
cin >> n >> m;
#+END_SRC

** 最小構成のパーサ

** =IO= モナドについて

*** 標準出力を =MonadIO=

* グラフ問題
:PROPERTIES:
:EXPORT_FILE_NAME: graphs
:END:

グラフ探索では手続き型プログラミングがおすすめです。

** BFS

** DFS

** Dijkstra

*** 枝刈り

*** Min ヒープ、 Max ヒープ

** 経路復元

** 二部グラフの判定

** トポロジカルソート

** 強連結成分

** Floyd-Warshall

** Bellman-ford

** Kruskall 法 (最小全域木)

* n 次元 vector
:PROPERTIES:
:EXPORT_FILE_NAME: ix-vector
:END:

** =Ix=

* 動的計画法
:PROPERTIES:
:EXPORT_FILE_NAME: dp
:END:

** 畳み込み

ナップサック問題を始めとした DP の問題は畳み込みによって解くことができます。

** =constructN= 

* 累積和と群
:PROPERTIES:
:EXPORT_FILE_NAME: csum
:END:

#+BEGIN_SRC haskell
import Data.List
scanl' (+) (0 :: Int) [1, 2, 3, 4, 5]
#+END_SRC

#+RESULTS:
: [0,1,3,6,10,15]

** =+!= 演算子

** 2 次元累積和

* 2 分法と関数渡し
:PROPERTIES:
:EXPORT_FILE_NAME: bisect
:END:

mid

* 尺取り法と unfoldr
:PROPERTIES:
:EXPORT_FILE_NAME: two-pointers
:END:

** Stateless な尺取り法

** Statefull な尺取り法

* 座標変換と行列
:PROPERTIES:
:EXPORT_FILE_NAME: transform
:END:

行列としてを持っておく？

** 原点を中心とする場合

** 長方形を回転させる場合

PAST

*** 座標系の整理

* 場合の数
:PROPERTIES:
:EXPORT_FILE_NAME: cases
:END:

** 組み合わせ

* 整数
:PROPERTIES:
:EXPORT_FILE_NAME: integer
:END:

** 素数列挙

** 素因数分解

** フェルマーの小定理

** 拡張ユークリッドの互助法

** 位取り法、進数変換

Rolling hash と同様に、モノイドで考えるのが良いかも

* 幾何
:PROPERTIES:
:EXPORT_FILE_NAME: geom
:END:

** ベクトル

*** 内積

*** 外積

* セグメント木とモノイド
:PROPERTIES:
:EXPORT_FILE_NAME: segtree
:END:

* 転倒数、辞書順
:PROPERTIES:
:EXPORT_FILE_NAME: segtree-algorithms
:END:

- Chokudai Speedrun 01
- Chokudai Speedrun 02
- TDPC のやつ

* 木
:PROPERTIES:
:EXPORT_FILE_NAME: trees
:END:
** LCA
** 全包囲木 DP
** HLD (Heavy-Light Decomposition)
* ネットワークフロー
:PROPERTIES:
:EXPORT_FILE_NAME: network-flow
:END:

** 最大流

** 最小費用流

* 動的計画法
:PROPERTIES:
:EXPORT_FILE_NAME: dp
:END:
** ナップサック問題と単調増加列

青 diff のやつ

** 集合 DP

*** チーム分けの集合 DP

** 期待値 DP

** 区間 DP

** 挿入 DP

* ダブリングとテーブル
:PROPERTIES:
:EXPORT_FILE_NAME: binary-lifting
:END:

** LCA

* Rolling hash とモノイド
:PROPERTIES:
:EXPORT_FILE_NAME: rolling-hash
:END:

* 遅延セグメント木と半群作用
:PROPERTIES:
:EXPORT_FILE_NAME: lazy-segtree
:END:

** 準同型写像

ACL

** 1 点更新

** 2 分探索

* 平方分割 (sqrt decomposition)
:PROPERTIES:
:EXPORT_FILE_NAME: sqrt-decomposition
:END:

* Mo's algorithm
:PROPERTIES:
:EXPORT_FILE_NAME: mo
:END:

* 区間を set で管理するテクニック
:PROPERTIES:
:EXPORT_FILE_NAME: range-map
:END:

区間を map で管理するテクニック

* NTT (Number-Theorical Transform)
:PROPERTIES:
:EXPORT_FILE_NAME: ntt
:END:

* CHT (Convex Hull Trick)
:PROPERTIES:
:EXPORT_FILE_NAME: cht
:END:

* 終わりに
:PROPERTIES:
:EXPORT_FILE_NAME: end
:END:

まだ終わってない！

